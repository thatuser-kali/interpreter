/*
 * Copyright (C) 2016 newts
 * Produced as part of course software for COMP3652 at UWI, Mona
 * If you have any questions about this software, please contact
 * the author.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fnplot.gui;

import cs34q.gfx.GraphingPanel;
import fnplot.semantics.Environment;
import fnplot.semantics.Evaluator;
import fnplot.syntax.ArithProgram;
import fnplot.syntax.FnPlotLexer;
import fnplot.syntax.FnPlotParser;
import fnplot.sys.FnPlotException;
import fnplot.values.FnPlotValue;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.LayoutStyle;
import javax.swing.SpinnerNumberModel;
import javax.swing.WindowConstants;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Keymap;

/**
 *
 * @author newts
 */
public class FnPlotFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;
    
    public static final int SYNTAX_ERROR = 1;
    public static final int RUNTIME_ERROR = 2;
    public static final int NO_ERROR = 0;
    
    Action sendAction;
    Evaluator interp;
    Keymap inKeyMap;
    ArrayList<String> history;

    /**
     * Creates new form FnPlotFrame
     */
    public FnPlotFrame() {
        initComponents();
        history = new ArrayList<>();
        interp = new Evaluator();
        interp.setPlotter(new GraphPlotter(gPanel));
        sendAction = new AbstractAction("SEND") {
            private static final long serialVersionUID = 1L;
            @Override
            public void actionPerformed(ActionEvent e) {
                sendInput();
            }
        };
        
        inKeyMap = inputTextArea.getKeymap();
        inKeyMap.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_DOWN_MASK), sendAction);
    }

    private void sendInput() {
        Document inDoc = inputTextArea.getDocument();
        int len = inDoc.getLength();
        try {
            String inputText = inDoc.getText(0, len);
            StringReader reader = new StringReader(inputText);
            display(inputText);
            history.add(inputText);
            int errCode = evaluate(reader);
            // clear the input area
            inputTextArea.replaceRange("", 0, len);
        } catch (BadLocationException ex) {
            Logger.getLogger(FnPlotFrame.class.getName()).log(Level.SEVERE, 
                    "Failed to retrieve input!", ex);
        }
    }
    
    public int evaluate(Reader reader) {
        FnPlotParser parser;
	ArithProgram program;
        Environment<FnPlotValue<?>> env = interp.getGlobalEnv();
	        
        try {
	    parser = new FnPlotParser(new FnPlotLexer(reader));
	    program = (ArithProgram) parser.parse().value;
	} catch (Exception e) {
	    display ("Parse Error: " + e.getMessage());
            return SYNTAX_ERROR;
	}

	if (program != null)
	    try {
		FnPlotValue<?> result;
		result = program.visit(interp, env);
		display ("Result: " + result + "\n");
                return NO_ERROR;
	    } catch (FnPlotException e) {
		display (e.getMessage());
                return RUNTIME_ERROR;
	    }
        else
            return SYNTAX_ERROR;
    }
    
    public void display(String msg) {
        historyTextArea.append(msg);
        historyTextArea.append("\n");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        historyTextArea = new JTextArea();
        displayPanel = new JPanel();
        gPanel = new GraphingPanel();
        graphCtrlPanel = new JPanel();
        hPanIncrSpinner = new JSpinner();
        panUpButton = new JButton();
        panDownButton = new JButton();
        panRightButton = new JButton();
        panLeftButton = new JButton();
        vPanIncrSpinner = new JSpinner();
        xAxisCheckBox = new JCheckBox();
        yAxisCheckBox = new JCheckBox();
        zoomSpinner = new JSpinner();
        zoomOutButton = new JButton();
        zoomInButton = new JButton();
        resetButton = new JButton();
        jScrollPane2 = new JScrollPane();
        inputTextArea = new JTextArea();
        jLabel1 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        historyTextArea.setEditable(false);
        historyTextArea.setColumns(20);
        historyTextArea.setRows(5);
        jScrollPane1.setViewportView(historyTextArea);

        displayPanel.setLayout(new BoxLayout(displayPanel, BoxLayout.PAGE_AXIS));

        gPanel.showXAxis(true);
        gPanel.showYAxis(true);

        GroupLayout gPanelLayout = new GroupLayout(gPanel);
        gPanel.setLayout(gPanelLayout);
        gPanelLayout.setHorizontalGroup(gPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );
        gPanelLayout.setVerticalGroup(gPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        displayPanel.add(gPanel);

        graphCtrlPanel.setPreferredSize(new Dimension(288, 200));

        panUpButton.setText("Up");
        panUpButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                panUpButtonActionPerformed(evt);
            }
        });

        panDownButton.setText("Down");
        panDownButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                panDownButtonActionPerformed(evt);
            }
        });

        panRightButton.setText("Right");
        panRightButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                panRightButtonActionPerformed(evt);
            }
        });

        panLeftButton.setText("Left");
        panLeftButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                panLeftButtonActionPerformed(evt);
            }
        });

        vPanIncrSpinner.setModel(new SpinnerNumberModel(0.5f, 0.0f, null, 0.1f));

        xAxisCheckBox.setSelected(true);
        xAxisCheckBox.setText("X Axis?");
        xAxisCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                xAxisCheckBoxActionPerformed(evt);
            }
        });

        yAxisCheckBox.setSelected(true);
        yAxisCheckBox.setText("Y Axis?");
        yAxisCheckBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                yAxisCheckBoxActionPerformed(evt);
            }
        });

        zoomSpinner.setModel(new SpinnerNumberModel(1.5f, 1.1f, null, 0.1f));

        zoomOutButton.setText("Zoom -");
        zoomOutButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                zoomOutButtonActionPerformed(evt);
            }
        });

        zoomInButton.setText("Zoom +");
        zoomInButton.setMaximumSize(new Dimension(68, 25));
        zoomInButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                zoomInButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        GroupLayout graphCtrlPanelLayout = new GroupLayout(graphCtrlPanel);
        graphCtrlPanel.setLayout(graphCtrlPanelLayout);
        graphCtrlPanelLayout.setHorizontalGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                            .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(panUpButton, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                                .addComponent(vPanIncrSpinner, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE))
                            .addGap(80, 80, 80))
                        .addGroup(GroupLayout.Alignment.TRAILING, graphCtrlPanelLayout.createSequentialGroup()
                            .addComponent(panLeftButton, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)))
                    .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                        .addComponent(panDownButton, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)))
                .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(yAxisCheckBox, GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(hPanIncrSpinner)
                    .addComponent(xAxisCheckBox, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(panRightButton, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 150, Short.MAX_VALUE))
                    .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(zoomSpinner)
                            .addComponent(zoomOutButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zoomInButton, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(68, 68, 68))))
        );
        graphCtrlPanelLayout.setVerticalGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                        .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(panUpButton, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoomInButton, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(vPanIncrSpinner, GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                            .addComponent(zoomSpinner))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(panDownButton, GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                            .addComponent(zoomOutButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(graphCtrlPanelLayout.createSequentialGroup()
                        .addComponent(xAxisCheckBox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yAxisCheckBox)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton, GroupLayout.PREFERRED_SIZE, 63, GroupLayout.PREFERRED_SIZE)))
                .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, graphCtrlPanelLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(hPanIncrSpinner, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE))
                    .addGroup(graphCtrlPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(panLeftButton, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)
                        .addComponent(panRightButton, GroupLayout.PREFERRED_SIZE, 47, GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 22, Short.MAX_VALUE))
        );

        displayPanel.add(graphCtrlPanel);

        inputTextArea.setColumns(20);
        inputTextArea.setLineWrap(true);
        inputTextArea.setRows(3);
        inputTextArea.setTabSize(4);
        inputTextArea.setToolTipText("Enter your program here");
        jScrollPane2.setViewportView(inputTextArea);

        jLabel1.setText("Enter commands below.  Press Ctrl-Enter to send.");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayPanel, GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(displayPanel, GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 105, GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panUpButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_panUpButtonActionPerformed
        float yinc = (float) vPanIncrSpinner.getModel().getValue();
        gPanel.pan(0, yinc);
    }//GEN-LAST:event_panUpButtonActionPerformed

    private void panDownButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_panDownButtonActionPerformed
        float yinc = (float) vPanIncrSpinner.getModel().getValue();
        gPanel.pan(0, -yinc);
    }//GEN-LAST:event_panDownButtonActionPerformed

    private void panRightButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_panRightButtonActionPerformed
        float xinc = (float) hPanIncrSpinner.getModel().getValue();
        gPanel.pan(xinc, 0);
    }//GEN-LAST:event_panRightButtonActionPerformed

    private void panLeftButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_panLeftButtonActionPerformed
        float xinc = (float) hPanIncrSpinner.getModel().getValue();
        gPanel.pan(-xinc, 0);
    }//GEN-LAST:event_panLeftButtonActionPerformed

    private void xAxisCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_xAxisCheckBoxActionPerformed
        gPanel.showXAxis(xAxisCheckBox.isSelected());
    }//GEN-LAST:event_xAxisCheckBoxActionPerformed

    private void yAxisCheckBoxActionPerformed(ActionEvent evt) {//GEN-FIRST:event_yAxisCheckBoxActionPerformed
        gPanel.showYAxis(yAxisCheckBox.isSelected());
    }//GEN-LAST:event_yAxisCheckBoxActionPerformed

    private void zoomOutButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_zoomOutButtonActionPerformed
        float sf = (float) zoomSpinner.getModel().getValue();
        gPanel.scale(sf, sf);
    }//GEN-LAST:event_zoomOutButtonActionPerformed

    private void zoomInButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_zoomInButtonActionPerformed
        float sf = 1.0F / (float) zoomSpinner.getModel().getValue();
        gPanel.scale(sf, sf);
    }//GEN-LAST:event_zoomInButtonActionPerformed

    private void resetButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        gPanel.reset();
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FnPlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FnPlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FnPlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FnPlotFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FnPlotFrame().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel displayPanel;
    private GraphingPanel gPanel;
    private JPanel graphCtrlPanel;
    private JSpinner hPanIncrSpinner;
    private JTextArea historyTextArea;
    private JTextArea inputTextArea;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JButton panDownButton;
    private JButton panLeftButton;
    private JButton panRightButton;
    private JButton panUpButton;
    private JButton resetButton;
    private JSpinner vPanIncrSpinner;
    private JCheckBox xAxisCheckBox;
    private JCheckBox yAxisCheckBox;
    private JButton zoomInButton;
    private JButton zoomOutButton;
    private JSpinner zoomSpinner;
    // End of variables declaration//GEN-END:variables
}
